import java.util.Scanner;

task getProbeData(type: Task) {
     
    def lastCommitIdProperties = executeOnShell("git rev-list  --abbrev-commit -1 HEAD -- properties")
    
    def lastCommitIdCodigo = executeOnShell("git rev-list  --abbrev-commit -1 HEAD -- codigo")
    
    def lastTagProperties = executeOnShell("git describe --tags $lastCommitIdProperties");
        
    def lastTagCodigo = executeOnShell("git describe --tags $lastCommitIdCodigo");
    
    def lastBranchProperties =  executeOnShell("git reflog show --all | grep $lastCommitIdProperties | cut -d/ -f3- | cut -d@ -f1");
    
    def lastBranchCodigo = executeOnShell("git reflog show --all | grep $lastCommitIdCodigo | cut -d/ -f3- | cut -d@ -f1");    
    
    def text = "{\n \"artifact\" : \"$lastBranchCodigo:$lastTagCodigo\",\n \"props\" : \"$lastBranchProperties:$lastTagProperties\"\n}\n"
    
    println text;
    
    new File("${project.rootDir}/branchtag").newWriter().withWriter { w ->
        w << text
    }
}


def executeOnShell(String command) {
    return executeOnShell(command, new File("${project.rootDir}"))
}
 
def executeOnShell(String command, File workingDir) {
        
    def process = new ProcessBuilder(addShellPrefix(command))
                                    .directory(workingDir)
                                    .redirectErrorStream(true) 
                                    .start()
        
    def text = new Scanner(process.inputStream,"UTF-8").useDelimiter("\\A").next();
    process.waitFor();
        
    if (process.exitValue() != 0) {

        "N/A"  // No disponible
    } else {
    
        text.replaceAll("[\n\r]", "");
    }
}
 
def addShellPrefix(String command) {
    def commandArray = new String[3]
    commandArray[0] = "sh"
    commandArray[1] = "-c"
    commandArray[2] = command
    return commandArray
}
